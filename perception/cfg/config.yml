#
#  Author: GENTILE, Francisco
# Company: Go2Future S.A.
#

# https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_plugin_gst-nvurisrcbin.html
nvurisrcbin:
  # Set GPU Device ID used by nvurisrcbin components like decoder (nvv4l2decoder) and nvvideoconvert  
  gpu-id: 0
  # Enable/Disable async handling Asynchronous state changes. Default: 1
  async-handling: 1
  # Type of frames to skip during decoding. Enum "SkipFrames" Default: 0, "decode_all" 
  # - (0): decode_all     - Decode all frames 
  # - (1): decode_non_ref - Decode non-ref frames 
  # - (2): decode_key     - Decode key frames
  dec-skip-frames: 0
  # Memory type for cuda decoder buffers, Memory type for CUDA decoder buffers. 
  # Represented internally by enum CudaDecMemType. 
  # - 0 (memtype_device): Device 
  # - 1 (memtype_pinned): Host Pinned 
  # - 2 (memtype_unified): Unified
  cudadec-memtype: 2
  # Set extra decoder surfaces; Number of surfaces in addition to minimum decode surfaces given by the decoder
  num-extra-surfaces: 3 # 0, 1
  #
  low-latency-mode: 1
  # Interval to drop the frames, e.g. a value of 5 means the decoder outputs every fifth frame, and others are dropped.
  drop-frame-interval: 0 # 2
  # Transport Protocol to use for RTP: Enum RtpProtocol Default: 0, rtp-multi
  # - (0): rtp-multi - UDP + UDP Multicast + TCP 
  # - (4): rtp-tcp - TCP Only
  select-rtp-protocol: 4
  # Maximum number of times a reconnection is attempted. Setting it to -1 means reconnection will be attempted 
  # infinitely. Valid when type of source is 4 and rtsp-reconnect-interval-sec is a non-zero positive value.
  rtsp-reconnect-attempts: 1
  # Timeout in seconds to wait since last data was received from an RTSP source before forcing a reconnection. 
  # 0=disable timeout
  rtsp-reconnect-interval: 10 # 5
  # Jitterbuffer size in milliseconds; applicable only for RTSP streams. Default latency=100.
  latency: 200 # 500 1000
  # Tells the jitterbuffer to never exceed the given latency in size
  drop-on-latency: 1
  # UDP buffer size in bytes; applicable only for RTSP streams. Default udp-buffer-size=524288.
  udp-buffer-size: 1524288
  # 331776000
  type: 2
  

# https://gstreamer.freedesktop.org/documentation/playback/uridecodebin.html?gi-language=c
# https://gstreamer.freedesktop.org/documentation/rtsp/rtspsrc.html?gi-language=c
uridecodebin:
  # rtspsrc properties
  # ==================
  # Tells the jitterbuffer to never exceed the given latency in size. Default: 0
  drop-on-latency: 0
  # Amount of ms to buffer. Default: 2000
  latency: 1000
  # Control the buffering and timestamping mode used by the jitterbuffer. Default: auto(3) 
  #     none (0) - Only use RTP timestamps
  #    slave (1) - Slave receiver to sender clock
  #   buffer (2) - Do low/high watermark buffering
  #     auto (3) - Choose mode depending on stream live
  #   synced (4) - Synchronized sender and receiver clocks
  buffer-mode: 3
  # Synchronize received streams to the NTP clock. Default: false
  ntp-sync: 1
  # NTP time source for RTCP packets. Default: ntp(0)
  #          ntp (0) - NTP time based on realtime clock
  #         unix (1) - UNIX time based on realtime clock
  # running-time (2) - Running time based on pipeline clock
  #   clock-time (3) - Pipeline clock time  
  ntp-time-source: 0
  # Whether to act as a live source. This is useful in combination with onvif-rate-control 
  # set to FALSE and usage of the TCP protocol. In that situation, data delivery rate can 
  # be entirely controlled from the client side, enabling features such as frame stepping 
  # and instantaneous rate changes. Default: true(1)
  is-live: 1
  # Ask the server to retransmit lost packets. Default: true(1)
  do-retransmission: 1
  # Enable RTCP support. Some old server don't like RTCP and then this property needs to be
  # set to FALSE. Default: true(1)
  do-rtcp: 1
  # Enable RTSP keep alive support. Some old server don't like RTSP keep alive and then this 
  # property needs to be set to FALSE. Default: true(1)
  do-rtsp-keep-alive: 1
  # Consecutive packet sequence numbers to accept the source. Default: 2
  probation: 2
  # Max number of retries when allocating RTP ports. Default: 20
  retry: 20
  # Retry TCP transport after UDP timeout microseconds (0 = disabled)
  timeout: 5000000
  # Size of the kernel UDP receive buffer in bytes. Default: 524288
  udp-buffer-size: 524288
  # Reconnect to the server if RTSP connection is closed when doing UDP. Default: true
  udp-reconnect: 0
  # Allowed lower transport protocols. Default: tcp+udp-mcast+udp
  #   GST_RTSP_LOWER_TRANS_UNKNOWN (0) - invalid transport flag
  #       GST_RTSP_LOWER_TRANS_UDP (1) - stream data over UDP
  # GST_RTSP_LOWER_TRANS_UDP_MCAST (2) - stream data over UDP multicast
  #       GST_RTSP_LOWER_TRANS_TCP (4) - stream data over TCP
  #     GST_RTSP_LOWER_TRANS_HTTP (16) - stream data tunneled over HTTP.
  #      GST_RTSP_LOWER_TRANS_TLS (32) - encrypt TCP and HTTP with TLS  
  protocols: 4
  # Fail after timeout microseconds on TCP connections (0 = disabled). Default: 20000000
  tcp-timeout: 20000000
  # Timestamp all buffers with their receive time when receiving RTP packets over TCP or HTTP.
  # When dealing with TCP based connections, setting timestamps for every packet is not done by 
  # default because a server typically bursts data, for which we don't want to compensate by 
  # speeding up the media. The other timestamps will be interpollated from this one using the
  # RTP timestamps.
  # This has the side effect that no drift compensation between the server and client is done, 
  # and over time the RTP timestamps will drift against the client's clock. This can lead to buffers 
  # (and observed end-to-end latency) to grow over time, or all packets arriving too late once a 
  # threshold is reached.
  # Enabling this property will timestamp all RTP packets with their receive times, which gets around 
  # the drift problem but can cause other problems if the server is sending data not smoothly in real-time.
  # Only applicable for RTSP over TCP or HTTP.
  # Default: false(0)
  tcp-timestamp: 0
  # When transitioning PAUSED-READY, allow up to timeout (in nanoseconds) delay in order to send 
  # teardown (0 = disabled). Default: 100000000
  teardown-timeout: 10000000


streammux:
  # Meaning: Maximum number of frames in a batch.
  # Type and Range: Integer, 0 to 4294967295
  batch-size: 1
  #
  # Meaning: Timeout in microseconds to wait after the first buffer is available to push the batch even 
  #          if a complete batch is not formed.
  # Type and Range: Signed integer, -1 to 2147483647 ... 9000000  120000
  batched-push-timeout: 100000 # 40000 - 1000000
  #
  # Meaning: If non-zero, muxer scales input frames to this width.
  # Type and Range: Integer, 0 to 4294967295
  width: 1280
  #
  # Meaning: If non-zero, muxer scales input frames to this height.
  # Type and Range: Integer, 0 to 4294967295
  height: 720
  #
  # Meaning: Maintains aspect ratio by padding with black borders when scaling input frames.
  # Type and Range: Boolean, 0 or 1
  enable-padding: 0
  #
  # Meaning: ID of the GPU on which to allocate device or unified memory to be used for copying 
  #          or scaling buffers. (dGPU only.)
  # Type and Range: Integer, 0 to 4294967295
  gpu-id: 0
  #
  # Meaning: Indicates to muxer that sources are live, e.g. live feeds like an RTSP or USB camera.
  # Type and Range: Boolean, 0 or 1
  live-source: 1
  #
  # Meaning: Type of memory to be allocated. 
  #          For dGPU:
  #             0 (nvbuf-mem-default): Default memory, cuda-device
  #             1 (nvbuf-mem-cuda-pinned): Pinned/Host CUDA memory
  #             2 (nvbuf-mem-cuda-device) Device CUDA memory
  #             3 (nvbuf-mem-cuda-unified): Unified CUDA memory
  #          For Jetson:
  #             0 (nvbuf-mem-default): Default memory, surface array
  #             4 (nvbuf-mem-surface-array): Surface array memory
  # Type and Range: Integer, 0-4
  nvbuf-memory-type: 3
  #
  # Meaning: Maximum number of surfaces per frame
  # Type and Range: Integer, 0-4
  num-surfaces-per-frame: 1
  #
  # Meaning: Number of buffers in output buffer pool
  # Type and Range: Integer <= 1024
  buffer-pool-size: 128
  #
  # Meaning: Attach system timestamp as ntp timestamp, otherwise ntp timestamp calculated from 
  #          RTCP sender reports
  # Type and Range: Boolean, 0 or 1
  attach-sys-ts: 1
  #
  # Meaning: Compute engine to use for scaling.
  #             0 - Default
  #             1 - GPU
  #             2 - VIC (Jetson only)
  # Type and Range: Integer, 0-2
  compute-hw: 1
  #
  # Meaning: Set interpolation methods
  #             0 - NvBufSurfTransformInter_Nearest: Specifies Nearest Interpolation Method interpolation.
  #             1 - NvBufSurfTransformInter_Bilinear: Specifies Bilinear Interpolation Method interpolation.
  #             2 - NvBufSurfTransformInter_Algo1: Specifies GPU-Cubic, VIC-5 Tap interpolation.
  #             3 - NvBufSurfTransformInter_Algo2: Specifies GPU-Super, VIC-10 Tap interpolation.
  #             4 - NvBufSurfTransformInter_Algo3: Specifies GPU-Lanzos, VIC-Smart interpolation.
  #             5 - NvBufSurfTransformInter_Algo4: Specifies GPU-Ignored, VIC-Nicest interpolation.
  #             6 - NvBufSurfTransformInter_Default: Specifies GPU-Nearest, VIC-Nearest interpolation.
  # Type and Range: Integer, 0-6
  interpolation-method: 6
  #
  # Meaning: Boolean property to sychronization of input frames using PTS
  # Type and Range: Boolean, 0 or 1
  # NOTE: For live streams, "sync-inputs" should be disabled to let batched-push-timeout set the time
  #       and not to see Adjusting muxerâ€™s batch push timeout based on FPS of fastest source
  sync-inputs: 0 # 0
  #
  # Meaning: Duration of input frames in milliseconds for use in NTP timestamp correction based on frame rate. 
  #          If set to 0 (default), frame duration is inferred automatically from PTS values seen at RTP 
  #          jitter buffer. When there is change in frame duration between the RTP jitter buffer and the 
  #          nvstreammux, this property can be used to indicate the correct frame rate to the nvstreammux, 
  #          for e.g. when there is an audiobuffersplit GstElement before nvstreammux in the pipeline. 
  #          If set to -1, disables frame rate based NTP timestamp correction.
  # Type and Range: Signed integer, -1 to 147483647
  # frame-duration: 0
  #
  # Meaning: (Experimental) Boolean property to control EOS propagation downstream from nvstreammux when all 
  #          the sink pads are at EOS. The default value is 0 for dGPU/Jetson
  # Type and Range: Boolean, 0 or 1
  drop-pipeline-eos: 0


# Preprocess module
preprocess:
  config-file: "/app/cfg/preprocess.txt"


# Inference using nvinfer:
primary-gie:
  enable: 1
  gpu-id: 0
  plugin-type: 0
  config-file-path: "/app/cfg/yolov8_pgie.yml"


# Tracker module
# Info: https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_plugin_gst-nvtracker.html?highlight=nvtracker
# Mandatory properties for the tracker:
#   tracker-width
#   tracker-height: needs to be multiple of 6 for NvDCF
#   gpu-id
#   ll-lib-file: path to low-level tracker lib
#   ll-config-file: required for NvDCF, optional for KLT and IOU
tracker:
  # Meaning: Frame width at which the tracker is to operate, in pixels.
  # Type and Range: Integer, 0 to 4294967295
  tracker-width: 1280
  #
  # Meaning: Frame height at which the tracker is to operate, in pixels.
  # Type and Range: Integer, 0 to 4294967295
  tracker-height: 736
  #

  # Meaning: Pathname of the low-level tracker library to be loaded by Gst-nvtracker.
  # Type and Range: String
  ll-lib-file: "/opt/nvidia/deepstream/deepstream/lib/libnvds_nvmultiobjecttracker.so"
  #
  
  # Meaning: Configuration file for the low-level library if needed.
  # Type and Range: Path to configuration file
  ll-config-file: "/app/cfg/tracker_NvDCF_resnet50.yml"
  # ll-config-file: "/app/cfg/tracker_DeepSort_resnet50.yml"
  #
  # Meaning: ID of the GPU on which device/unified memory is to be allocated, and with which buffer copy/scaling is to be done. (dGPU only.)
  # Type and Range: Integer, 0 to 4,294,967,295
  gpu-id: 0
  #
  # Meaning: Set surface stream type for tracking. (default value is 0)
  # Type and Range: Integer, >=0
  tracking-surface-type: 0
  #
  # Meaning: Enables tracking ID display on OSD.
  # Type and Range: Boolean
  display-tracking-id: 1
  #
  # Meaning: Compute engine to use for scaling.
  #             0 - Default
  #             1 - GPU
  #             2 - VIC (Jetson only)
  # Type and Range: Integer, 0 to 2
  compute-hw: 1
  #
  # Meaning: Allow force-reset of tracking ID based on pipeline event. 
  #          Once tracking ID reset is enabled and such event happens, 
  #          the lower 32-bit of the tracking ID will be reset to 0.
  #             0: Not reset tracking ID when stream reset or EOS event 
  #                happens
  #             1: Terminate all existing trackers and assign new IDs 
  #                for a stream when the stream reset happens 
  #                (i.e., GST_NVEVENT_STREAM_RESET)
  #             2: Let tracking ID start from 0 after receiving EOS event 
  #                (i.e., GST_NVEVENT_STREAM_EOS) (Note: Only the lower 
  #                32-bit of tracking ID to start from 0)
  #             3: Enable both option 1 and 2
  # Type and Range: Integer, 0 to 3
  tracking-id-reset-mode: 3
  #
  # Meaning: Use the tensor-meta from Gst-nvdspreprocess if available 
  #          for tensor-meta-gie-id
  # Type and Range: Boolean
  input-tensor-meta: 0
  #
  # Meaning: Tensor Meta GIE ID to be used, property valid only if 
  #          input-tensor-meta is TRUE
  # Type and Range: Unsigned Integer, >= 0
  tensor-meta-gie-id: 1


# Video Analytic module
nvanalytics:
  config-file: "/app/cfg/nvdsanalytics.txt"


# Tiler for composing multiple streams
tiler:
  rows: 1
  columns: 1
  width: 1280
  height: 720
  gpu-id: 0
  nvbuf-memory-type: 3


# OSD for drawing on the screen
osd:
  gpu-id: 0               # (dGPU only)
  display-bbox: 1
  display-mask: 0
  display-clock: 0
  display-text: 1
  clock-font: "Arial"
  clock-font-size: 20
  x-clock-offset: 0
  y-clock-offset: 0
  clock-color: 0xff0000ff # (Clock is red with alpha=1)
  # If this property is set to 1, extracting the frame with openCV Mat var is not possible.
  # Then, this property should be set to 0.
  process-mode: 0         # Indicates the mode used to draw the objects
                          # Default mode: CPU mode
                          #   0: CPU mode
                          #   1: GPU mode


# Sink for using on amd64
egl-sink:
  qos: 0
  sync: 0
  async: 1
  gpu-id: 0


# Configuration for the MQTT broker
mqtt-broker:
  conn-id: "preception_colombia_tracking"
  host: "mosquitto-colombia"
  port: 1883
  conn-ttl: 0
  topic: "/perception/tracking"
  frames-topic: "/perception/frames"
  qos: 0
  retained: false
  # Frame interval at which payload is generated
  frame-interval: 15


# Redis configuration
redis:
  #
  # Hostname or IP address of the Redis server.
  host: "redis-colombia"
  #
  # Port number of the Redis server.
  port: 6379
  #
  # Username for the Redis server.
  user: ""
  #
  # Password for the Redis server.
  password: ""
  #
  # Database number to use.
  db: 0
  #
  # Optional. Timeout before we successfully send request to or receive response 
  # from redis. By default, the timeout is 0ms, i.e. never timeout and block until 
  # we send or receive successfuly.
  socket_timeout: 5000
  #
  # Connection Pool options
  # =======================
  # Pool size, i.e. max number of connections.
  pool_size: 4
  #
  # Optional. Max time to wait for a connection. 0ms by default, which means wait forever.
  # Say, the pool size is 3, while 4 threds try to fetch the connection, one of them will 
  # be blocked.
  pool_wait_timeout: 10000
  #
  # Optional. Max lifetime of a connection. 0ms by default, which means never expire the connection.
  # If the connection has been created for a long time, i.e. more than `connection_lifetime`,
  # it will be expired and reconnected.
  # This time is treated as minutes in code.
  pool_connection_lifetime: 2
  #
  # send2redisTask options:
  # =======================
  # Time to Live used to persist the data in Redis. 
  # By default, the TTL is 0 seconds, i.e. never expire.
  ttl_sec: 60 #300


rtsp-sink:
  # Boolean flag to enable or disable RTSP sink/server.
  enable: 0 # 1

  tcp-sink:
    enable: 0

    sink:
# Element Properties:
#   async               : Go asynchronously to PAUSED
#                         flags: readable, writable
#                         Boolean. Default: true
#   blocksize           : Size in bytes to pull per buffer (0 = default)
#                         flags: readable, writable
#                         Unsigned Integer. Range: 0 - 4294967295 Default: 4096 
#   buffers-max         : max number of buffers to queue for a client (-1 = no limit)
#                         flags: readable, writable
#                         Integer. Range: -1 - 2147483647 Default: -1 
#   buffers-min         : min number of buffers to queue (-1 = as few as possible)
#                         flags: readable, writable
#                         Integer. Range: -1 - 2147483647 Default: -1 
#   buffers-queued      : Number of buffers currently queued
#                         flags: readable
#                         Unsigned Integer. Range: 0 - 4294967295 Default: 0 
#   buffers-soft-max    : Recover client when going over this limit (-1 = no limit)
#                         flags: readable, writable
#                         Integer. Range: -1 - 2147483647 Default: -1 
#   burst-format        : The format of the burst units (when sync-method is burst[[-with]-keyframe])
#                         flags: readable, writable
#                         Enum "GstFormat" Default: 0, "undefined"
#                            (0): undefined        - GST_FORMAT_UNDEFINED
#                            (1): default          - GST_FORMAT_DEFAULT
#                            (2): bytes            - GST_FORMAT_BYTES
#                            (3): time             - GST_FORMAT_TIME
#                            (4): buffers          - GST_FORMAT_BUFFERS
#                            (5): percent          - GST_FORMAT_PERCENT
#   burst-value         : The amount of burst expressed in burst-format
#                         flags: readable, writable
#                         Unsigned Integer64. Range: 0 - 18446744073709551615 Default: 0 
#   bytes-min           : min number of bytes to queue (-1 = as little as possible)
#                         flags: readable, writable
#                         Integer. Range: -1 - 2147483647 Default: -1 
#   bytes-served        : Total number of bytes send to all clients
#                         flags: readable
#                         Unsigned Integer64. Range: 0 - 18446744073709551615 Default: 0
#   bytes-to-serve      : Number of bytes received to serve to clients
#                         flags: readable
#                         Unsigned Integer64. Range: 0 - 18446744073709551615 Default: 0 
#   current-port        : The port number the socket is currently bound to
#                         flags: readable
#                         Integer. Range: 0 - 65535 Default: 0 
#   enable-last-sample  : Enable the last-sample property
#                         flags: readable, writable
#                         Boolean. Default: true
#   host                : The host/IP to listen on
#                         flags: readable, writable
#                         String. Default: "localhost"
#   last-sample         : The last sample received in the sink
#                         flags: readable
#                         Boxed pointer of type "GstSample"
#   max-bitrate         : The maximum bits per second to render (0 = disabled)
#                         flags: readable, writable
#                         Unsigned Integer64. Range: 0 - 18446744073709551615 Default: 0 
#   max-lateness        : Maximum number of nanoseconds that a buffer can be late before it is dropped (-1 unlimited)
#                         flags: readable, writable
#                         Integer64. Range: -1 - 9223372036854775807 Default: -1 
#   name                : The name of the object
#                         flags: readable, writable, 0x2000
#                         String. Default: "tcpserversink0"
#   num-handles         : The current number of client handles
#                         flags: readable
#                         Unsigned Integer. Range: 0 - 4294967295 Default: 0 
#   parent              : The parent of the object
#                         flags: readable, writable, 0x2000
#                         Object of type "GstObject"
#   port                : The port to listen to (0=random available port)
#                         flags: readable, writable
#                         Integer. Range: 0 - 65535 Default: 4953 
#   processing-deadline : Maximum processing time for a buffer in nanoseconds
#                         flags: readable, writable
#                         Unsigned Integer64. Range: 0 - 18446744073709551615 Default: 20000000 
#   qos                 : Generate Quality-of-Service events upstream
#                         flags: readable, writable
#                         Boolean. Default: false
#   qos-dscp            : Quality of Service, differentiated services code point (-1 default)
#                         flags: readable, writable
#                         Integer. Range: -1 - 63 Default: -1 
#   recover-policy      : How to recover when client reaches the soft max
#                         flags: readable, writable
#                         Enum "GstMultiHandleSinkRecoverPolicy" Default: 0, "none"
#                            (0): none             - Do not try to recover
#                            (1): latest           - Resync client to latest buffer
#                            (2): soft-limit       - Resync client to soft limit
#                            (3): keyframe         - Resync client to most recent keyframe
#   render-delay        : Additional render delay of the sink in nanoseconds
#                         flags: readable, writable
#                         Unsigned Integer64. Range: 0 - 18446744073709551615 Default: 0 
#   resend-streamheader : Resend the streamheader if it changes in the caps
#                         flags: readable, writable
#                         Boolean. Default: true
#   send-dispatched     : If GstNetworkMessageDispatched events should be pushed
#                         flags: readable, writable
#                         Boolean. Default: false
#   send-messages       : If GstNetworkMessage events should be pushed
#                         flags: readable, writable
#                         Boolean. Default: false
#   stats               : Sink Statistics
#                         flags: readable
#                         Boxed pointer of type "GstStructure"
#                                                         average-rate: 0
#                                                              dropped: 0
#                                                             rendered: 0

#   sync                : Sync on the clock
#                         flags: readable, writable
#                         Boolean. Default: true
#   sync-method         : How to sync new clients to the stream
#                         flags: readable, writable
#                         Enum "GstMultiHandleSinkSyncMethod" Default: 0, "latest"
#                            (0): latest           - Serve starting from the latest buffer
#                            (1): next-keyframe    - Serve starting from the next keyframe
#                            (2): latest-keyframe  - Serve everything since the latest keyframe (burst)
#                            (3): burst            - Serve burst-value data to client
#                            (4): burst-keyframe   - Serve burst-value data starting on a keyframe
#                            (5): burst-with-keyframe - Serve burst-value data preferably starting on a keyframe
#   throttle-time       : The time to keep between rendered buffers (0 = disabled)
#                         flags: readable, writable
#                         Unsigned Integer64. Range: 0 - 18446744073709551615 Default: 0 
#   time-min            : min amount of time to queue (in nanoseconds) (-1 = as little as possible)
#                         flags: readable, writable
#                         Integer64. Range: -1 - 9223372036854775807 Default: -1 
#   timeout             : Maximum inactivity timeout in nanoseconds for a client (0 = no limit)
#                         flags: readable, writable
#                         Unsigned Integer64. Range: 0 - 18446744073709551615 Default: 0 
#   ts-offset           : Timestamp offset in nanoseconds
#                         flags: readable, writable
#                         Integer64. Range: -9223372036854775808 - 9223372036854775807 Default: 0 
#   unit-format         : The unit to measure the max/soft-max/queued properties
#                         flags: readable, writable
#                         Enum "GstFormat" Default: 4, "buffers"
#                            (0): undefined        - GST_FORMAT_UNDEFINED
#                            (1): default          - GST_FORMAT_DEFAULT
#                            (2): bytes            - GST_FORMAT_BYTES
#                            (3): time             - GST_FORMAT_TIME
#                            (4): buffers          - GST_FORMAT_BUFFERS
#                            (5): percent          - GST_FORMAT_PERCENT
#   units-max           : max number of units to queue (-1 = no limit)
#                         flags: readable, writable
#                         Integer64. Range: -1 - 9223372036854775807 Default: -1 
#   units-soft-max      : Recover client when going over this limit (-1 = no limit)
#                         flags: readable, writable
#                         Integer64. Range: -1 - 9223372036854775807 Default: -1 

      host: "0.0.0.0"
      port: 5404
      async: 1
      sync: 1

    encoder:
      bitrate: 1000000 #3000000

    rtsp-server:
      # Port number where the UDP/TCP SINK plugin is sending the stream. 5404
      sink-port: 5404
      # Encoding of the stream. ex: H264, H265
      encoding-name: "H264"
      # Port number where the RTSP server will listen for incoming connections. 10558
      rtsp-port: 10558
      # Boolean flag to enable or disable RTCP channel.
      enable-rtcp: 1
      # Stream mountpoint. ex: /ds-test means rtsp://localhost:<rtsp-port>/ds-test
      mountpoint: "/output"
      # Pipeline to be used for the RTSP server. UDP Port and encoding must match the UDP SINK plugin.
      # This field is used to create the RTSP server pipeline through a sprintf function, so this es a template.
      # In the port field is used the %d to replace it with the udp-port value.
      # In the encoding-name field is used the %s to replace it with the encoding-name value.
      # pipeline: "( tcpclientsrc name=pay0 port=%d ! matroskademux ! jpegdec \" )"
      # pipeline: "( tcpclientsrc name=pay0 host=127.0.0.1 port=%d buffer-size=1524288 caps=\"application/x-rtp, media=video, clock-rate=100000, encoding-name=(string)%s, payload=96\" )"
      pipeline: "( tcpclientsrc port=%d ! gdpdepay ! videoconvert ! x264enc ! rtph264pay name=pay0 pt=96 )"


  udp-sink:
    enable: 1 #1

    sink:
# Element Properties:
#   async               : Go asynchronously to PAUSED
#                         flags: readable, writable
#                         Boolean. Default: true
#   auto-multicast      : Automatically join/leave the multicast groups, FALSE means user has to do it himself
#                         flags: readable, writable
#                         Boolean. Default: true
#   bind-address        : Address to bind the socket to
#                         flags: readable, writable
#                         String. Default: null
#   bind-port           : Port to bind the socket to
#                         flags: readable, writable
#                         Integer. Range: 0 - 65535 Default: 0 
#   blocksize           : Size in bytes to pull per buffer (0 = default)
#                         flags: readable, writable
#                         Unsigned Integer. Range: 0 - 4294967295 Default: 4096 
#   buffer-size         : Size of the kernel send buffer in bytes, 0=default
#                         flags: readable, writable
#                         Integer. Range: 0 - 2147483647 Default: 0 
#   bytes-served        : Total number of bytes sent to all clients
#                         flags: readable
#                         Unsigned Integer64. Range: 0 - 18446744073709551615 Default: 0 
#   bytes-to-serve      : Number of bytes received to serve to clients
#                         flags: readable
#                         Unsigned Integer64. Range: 0 - 18446744073709551615 Default: 0 
#   clients             : A comma separated list of host:port pairs with destinations
#                         flags: readable, writable
#                         String. Default: "localhost:5004"
#   close-socket        : Close socket if passed as property on state change
#                         flags: readable, writable
#                         Boolean. Default: true
#   enable-last-sample  : Enable the last-sample property
#                         flags: readable, writable
#                         Boolean. Default: true
#   force-ipv4          : Forcing the use of an IPv4 socket (DEPRECATED, has no effect anymore)
#                         flags: readable, writable, deprecated
#                         Boolean. Default: false
#   host                : The host/IP/Multicast group to send the packets to
#                         flags: readable, writable
#                         String. Default: "localhost"
#   last-sample         : The last sample received in the sink
#                         flags: readable
#                         Boxed pointer of type "GstSample"
#   loop                : Used for setting the multicast loop parameter. TRUE = enable, FALSE = disable
#                         flags: readable, writable
#                         Boolean. Default: true
#   max-bitrate         : The maximum bits per second to render (0 = disabled)
#                         flags: readable, writable
#                         Unsigned Integer64. Range: 0 - 18446744073709551615 Default: 0 
#   max-lateness        : Maximum number of nanoseconds that a buffer can be late before it is dropped (-1 unlimited)
#                         flags: readable, writable
#                         Integer64. Range: -1 - 9223372036854775807 Default: -1 
#   multicast-iface     : The network interface on which to join the multicast group
#                         flags: readable, writable
#                         String. Default: null
#   name                : The name of the object
#                         flags: readable, writable, 0x2000
#                         String. Default: "udpsink0"
#   parent              : The parent of the object
#                         flags: readable, writable, 0x2000
#                         Object of type "GstObject"
#   port                : The port to send the packets to
#                         flags: readable, writable
#                         Integer. Range: 0 - 65535 Default: 5004 
#   processing-deadline : Maximum processing time for a buffer in nanoseconds
#                         flags: readable, writable
#                         Unsigned Integer64. Range: 0 - 18446744073709551615 Default: 20000000 
#   qos                 : Generate Quality-of-Service events upstream
#                         flags: readable, writable
#                         Boolean. Default: false
#   qos-dscp            : Quality of Service, differentiated services code point (-1 default)
#                         flags: readable, writable
#                         Integer. Range: -1 - 63 Default: -1 
#   render-delay        : Additional render delay of the sink in nanoseconds
#                         flags: readable, writable
#                         Unsigned Integer64. Range: 0 - 18446744073709551615 Default: 0 
#   send-duplicates     : When a distination/port pair is added multiple times, send packets multiple times as well
#                         flags: readable, writable
#                         Boolean. Default: true
#   socket              : Socket to use for UDP sending. (NULL == allocate)
#                         flags: readable, writable
#                         Object of type "GSocket"
#   socket-v6           : Socket to use for UDPv6 sending. (NULL == allocate)
#                         flags: readable, writable
#                         Object of type "GSocket"
#   stats               : Sink Statistics
#                         flags: readable
#                         Boxed pointer of type "GstStructure"
#                                                         average-rate: 0
#                                                              dropped: 0
#                                                             rendered: 0

#   sync                : Sync on the clock
#                         flags: readable, writable
#                         Boolean. Default: true
#   throttle-time       : The time to keep between rendered buffers (0 = disabled)
#                         flags: readable, writable
#                         Unsigned Integer64. Range: 0 - 18446744073709551615 Default: 0 
#   ts-offset           : Timestamp offset in nanoseconds
#                         flags: readable, writable
#                         Integer64. Range: -9223372036854775808 - 9223372036854775807 Default: 0 
#   ttl                 : Used for setting the unicast TTL parameter
#                         flags: readable, writable
#                         Integer. Range: 0 - 255 Default: 64 
#   ttl-mc              : Used for setting the multicast TTL parameter
#                        flags: readable, writable
#                         Integer. Range: 0 - 255 Default: 1 
#   used-socket         : Socket currently in use for UDP sending. (NULL == no socket)
#                         flags: readable
#                         Object of type "GSocket"
#   used-socket-v6      : Socket currently in use for UDPv6 sending. (NULL == no socket)
#                         flags: readable
#                         Object of type "GSocket"

# Element Signals:
#   "client-added" :  void user_function (GstElement* object,
#                                         gchararray arg0,
#                                         gint arg1,
#                                         gpointer user_data);
#   "client-removed" :  void user_function (GstElement* object,
#                                           gchararray arg0,
#                                           gint arg1,
#                                           gpointer user_data);

# Element Actions:
#   "add" :  void user_function (GstElement* object,
#                                gchararray arg0,
#                                gint arg1);
#   "remove" :  void user_function (GstElement* object,
#                                   gchararray arg0,
#                                   gint arg1);
#   "clear" :  void user_function (GstElement* object);
#   "get-stats" :  GstStructure* user_function (GstElement* object,
#                                                gchararray arg0,
#                                                gint arg1);
      # auto-multicast: 1
      host: "224.224.255.255"
      # host: "127.0.0.1" 5404
      port: 5404
      async: 1
      sync: 1

    encoder:
      bitrate: 1000000 #3000000

    rtsp-server:
      # Port number where the UDP/TCP SINK plugin is sending the stream.
      sink-port: 5404
      # Encoding of the stream. ex: H264, H265
      encoding-name: "H264"
      # Port number where the RTSP server will listen for incoming connections.
      rtsp-port: 11558
      # Boolean flag to enable or disable RTCP channel.
      enable-rtcp: 1
      # Stream mountpoint. ex: /ds-test means rtsp://localhost:<rtsp-port>/ds-test
      mountpoint: "/output"
      # Pipeline to be used for the RTSP server. UDP Port and encoding must match the UDP SINK plugin.
      # This field is used to create the RTSP server pipeline through a sprintf function, so this es a template.
      # In the port field is used the %d to replace it with the udp-port value.
      # In the encoding-name field is used the %s to replace it with the encoding-name value.
      pipeline: "( udpsrc name=pay0 port=%d buffer-size=15242880 caps=\"application/x-rtp, media=video, clock-rate=100000, encoding-name=(string)%s, payload=96\" )"

# Output directory for saving the video frames
output-directory: "/app/frames"
